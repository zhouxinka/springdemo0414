<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">
    <!--此文件负责整个mvc中的配置-->
    <!-- 加载配置属性文件,然后在BaseController里面利用${key}来获取配置文件里面的属性值 -->
    <context:property-placeholder ignore-unresolvable="true" location="classpath:base.properties" />

    <!--启用spring的一些annotation -->
    <context:annotation-config/>

    <!-- 配置注解驱动 可以将request参数与绑定到controller参数上 -->
    <mvc:annotation-driven/>

    <!--静态资源映射-->
    <!--本项目把静态资源放在了webapp的statics目录下，资源映射如下-->
    <mvc:resources mapping="/css/**" location="/WEB-INF/statics/css/"/>
    <mvc:resources mapping="/js/**" location="/WEB-INF/statics/js/"/>
    <mvc:resources mapping="/image/**" location="/WEB-INF/statics/image/"/>

    <!-- 对模型视图名称的解析，即在模型视图名称添加前后缀(如果最后一个还是表示文件夹,则最后的斜杠不要漏了) 使用JSP-->
    <!-- 默认的视图解析器 在上边的解析错误时使用 (默认使用html)- -->
    <bean id="defaultViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <!--设置JSP文件的目录位置-->
        <property name="prefix" value="/WEB-INF/views/"/>
        <property name="suffix" value=".jsp"/>
        <property name="exposeContextBeansAsAttributes" value="true"/>
    </bean>

    <!-- 自动扫描装配controller,这里只需要扫描com.example.controller下带有controller注解的类-->
    <context:component-scan base-package="com.example.controller">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    
    <!--配置拦截器-->
    <mvc:interceptors>
        <mvc:interceptor>
            <!--对所有请求进行拦截-->
            <mvc:mapping path="${adminPath}/**"/>
            <!--以下配置的是不拦截的请求,意思就是请求不会被拦截器拦截，不会执行拦截器里面的任何方法包括preHandle方法-->
            <mvc:exclude-mapping path="${adminPath}/login"/>
            <mvc:exclude-mapping path="${adminPath}/doLogin"/>
            <bean class="com.example.interceptors.MyFirstInterceptors"></bean>
        </mvc:interceptor>

        <mvc:interceptor>
            <!--对所有请求进行拦截-->
            <mvc:mapping path="/t/**"/>
            <bean class="com.example.interceptors.MyFirstInterceptors"></bean>
        </mvc:interceptor>
    </mvc:interceptors>

    <!--配置异常处理-->
    <context:component-scan base-package="com.example.exception"/>
</beans>